Index: axf/trafficpattern/__init__.py
===================================================================
Index: axf/trafficpattern/traffic_extract.py
===================================================================
--- axf/trafficpattern/traffic_extract.py	(revision 0)
+++ axf/trafficpattern/traffic_extract.py	(working copy)
@@ -0,0 +1,34 @@
+import time
+import os
+from axf.utils import create_path,safe_execute
+from axf.shp2csv import axf_info, axf_error
+
+TRAFFIC_SAVE_PATH = r'/var/www/html/ec_latest_builds/SPEED_PATTERN'
+OLDFORMAT_PATH = 'oldformat'
+NEWFORMAT_PATH = 'newformat'
+
+'''
+the genarate directory structure is 
+/var/www/html/ec_latest_builds/SPEED_PATTERN/
+                                            ---version_time/oldformat/file1,file2
+                                                           /newformat/file3
+'''
+
+
+def extral_format_sqls(version):
+    save_path = os.path.join(TRAFFIC_SAVE_PATH, version + "_" + time.strftime("%Y-%m-%d", time.localtime()))
+
+    oldformat_path = os.path.join(save_path, OLDFORMAT_PATH)
+    create_path(oldformat_path)
+
+    newformat_path = os.path.join(save_path, NEWFORMAT_PATH)
+    create_path(newformat_path)
+
+    sql1_old = "COPY (SELECT * FROM public.hsnp) TO '%s/hsnp.csv' DELIMITER ';' CSV HEADER" % oldformat_path
+    axf_info('copy csv file done. %s' % oldformat_path + '/hsnp.csv')
+    sql2_old = "COPY (SELECT profile_id, time_slot, rel_sp FROM hs.hspr) TO '%s/hspr.csv' DELIMITER ';' CSV HEADER" % oldformat_path
+    axf_info('copy csv file done. %s' % oldformat_path + '/hsnp.csv')
+    sql1_new = "COPY (SELECT sp.*, rs.road_id FROM public.speedprofile sp, public.roadsegment rs WHERE sp.road = rs.road) TO '%s/speedprofile_14q3.csv' DELIMITER ',' CSV HEADER " % newformat_path
+    axf_info('copy csv file done. %s' % newformat_path + '/speedprofile_14q3.csv')
+
+    sqls = [sql1_old, sql2_old, sql1_new]
Index: axf/utils.py
===================================================================
--- axf/utils.py	(revision 0)
+++ axf/utils.py	(working copy)
@@ -0,0 +1,21 @@
+import sys
+import os
+
+
+def safe_execute(cmd, exit_code=0):
+    """
+    :param cmd: the command to be executed.
+    :param exit_code: the successful execution exit code expected.
+    :return: N/A
+    """
+    sys.stdout.write('%s\n' % cmd)
+    ec = os.system(cmd)
+    if ec != exit_code:
+        sys.stderr.write('Error: execute [%s] failed, exit code = %s\n' % (cmd, ec))
+        sys.exit(-1)
+
+
+def create_path(path):
+    if not os.path.exists(path):
+        cmd = 'mkdir -p %s' % path
+        safe_execute(cmd)
Index: axf_importer.py
===================================================================
--- axf_importer.py	(revision 508801)
+++ axf_importer.py	(working copy)
@@ -29,10 +29,10 @@
 from dbpreprocessing.addtnpoiid import PoiIdHandler
 import axf.tollcost.importer as tollcost_import
 from axf.config_reader import get_options
+from axf.trafficpattern import traffic_extract
 
 TOLLCOST_SECTION = 'tollcost'
 
-
 class AxfImporter(object):
     TYPES_IN_ALL = ['wide_background', 'mid_background', 'population', 'highway', 'hs', 'ex_info']
 
@@ -51,6 +51,7 @@
 
     def __del__(self):
         # TODO
+        self.conn.close()
         pass
 
     def _init_pgsql(self):
@@ -129,6 +130,8 @@
             return False
 
         # traffic
+        if not self._traffic_extract():
+            return False
 
         return True
 
@@ -171,6 +174,10 @@
 
         tollcost_import.do_import(optoins)
         return True
+    #
+    def _traffic_extract(self):
+        sqls = traffic_extract.extral_format_sqls(self.options.version)
+        return self._execute_sql(sqls)
 
     def import_axf_all(self, axf_path):
         """
@@ -654,4 +661,4 @@
 -O C:\Users\Desktop\tollcost_test\out
 C:\Users\Desktop\tollcost_test
 
-'''
+'''
\ No newline at end of file
