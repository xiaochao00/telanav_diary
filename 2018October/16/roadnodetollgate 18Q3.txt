# pay_type
CREATE OR REPLACE FUNCTION is_normal_paytype(gate_info character) RETURNS bool AS
$$
SELECT EXISTS(
SELECT gate_info FROM (SELECT DISTINCT unnest(regexp_split_to_array(gate_info , '\|')::int[]) g_i) a WHERE g_i &(1<<0)!=0
);
 
$$
LANGUAGE SQL;
 
CREATE OR REPLACE FUNCTION is_ETC_paytype(gate_info character) RETURNS bool AS
$$
SELECT EXISTS(
SELECT gate_info FROM (SELECT DISTINCT unnest(regexp_split_to_array(gate_info , '\|')::int[]) g_i) a WHERE g_i &(1<<1)!=0
);
$$
LANGUAGE SQL;
 
CREATE OR REPLACE FUNCTION is_alipay_paytype(gate_info character) RETURNS bool AS
$$
SELECT EXISTS(
SELECT gate_info FROM (SELECT DISTINCT unnest(regexp_split_to_array(gate_info , '\|')::int[]) g_i) a WHERE g_i &(1<<3)!=0
);
$$
LANGUAGE SQL;
 
CREATE OR REPLACE FUNCTION is_wechat_paytype(gate_info character) RETURNS bool AS
$$
SELECT EXISTS(
SELECT gate_info FROM (SELECT DISTINCT unnest(regexp_split_to_array(gate_info , '\|')::int[]) g_i) a WHERE g_i &(1<<4)!=0
);
$$
LANGUAGE SQL;
 
CREATE OR REPLACE FUNCTION is_ITC_paytype(gate_info character) RETURNS bool AS
$$
SELECT EXISTS(
SELECT gate_info FROM (SELECT DISTINCT unnest(regexp_split_to_array(gate_info , '\|')::int[]) g_i) a WHERE g_i &(1<<5)!=0
);
$$
LANGUAGE SQL;

SELECT n.node, toll_id, n.name_chn, n.alias_chn, st_scale(n.geom, 1.0/3600,1.0/3600) geom, gate_lane, gate_info
FROM h51f.roadnodetollgate t, h51f.roadnode n, h51f.roadsegment r
WHERE n.node=t.node AND is_normal_paytype(gate_info) AND r.road=t.from_road AND ad_code LIKE '31%';


# gate_type

CREATE OR REPLACE FUNCTION is_normal_gatetype(gate_lane character) RETURNS bool AS
$$
SELECT CASE
WHEN POSITION('0' in gate_lane)!=0 THEN true
WHEN POSITION('2' in gate_lane)!=0 THEN true
ELSE false END;
$$
LANGUAGE SQL;

CREATE OR REPLACE FUNCTION is_hkmac_gatetype(gate_lane character) RETURNS bool AS
$$
SELECT CASE
WHEN POSITION('1' in gate_lane)!=0 THEN true
WHEN POSITION('2' in gate_lane)!=0 THEN true
WHEN POSITION('4' in gate_lane)!=0 THEN true
ELSE false END;
$$
LANGUAGE SQL;


CREATE OR REPLACE FUNCTION is_wide_gatetype(gate_lane character) RETURNS bool AS
$$
SELECT CASE
WHEN POSITION('3' in gate_lane)!=0 THEN true
WHEN POSITION('4' in gate_lane)!=0 THEN true
ELSE false END;
$$
LANGUAGE SQL;





